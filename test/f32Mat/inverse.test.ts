// VSCode起動時のtscサーバーにカスタムマッチャを認識させる為の記述
/// <reference types="../../types/vitest.d.ts" />

import { describe, expect, it } from "vitest";
import { fromRowMajor, getIdentity, inverse, multiply } from "@/f32Mat";
import { EPSILON_F32 as EPSILON, EPSILON_F32_ANY } from "../epsilon";

describe("Matrix.inverse", () => {
  it("calculates the inverse of a 2x2 matrix", () => {
    const matrix = fromRowMajor([
      [4, 7],
      [2, 6],
    ]);
    const expectedInverse = fromRowMajor([
      [0.6, -0.7],
      [-0.2, 0.4],
    ]);
    const result = inverse(matrix);

    expect(result.value).toBeCloseMatrix(expectedInverse.value, EPSILON);
  });

  it("calculates the inverse of a 3x3 matrix", () => {
    const matrix = fromRowMajor([
      [3, 0, 2],
      [2, 0, -2],
      [0, 1, 1],
    ]);
    const expectedInverse = fromRowMajor([
      [0.2, 0.2, 0],
      [-0.2, 0.3, 1],
      [0.2, -0.3, 0],
    ]);
    const result = inverse(matrix);

    expect(result.value).toBeCloseMatrix(expectedInverse.value, EPSILON);
  });

  it("calculates the inverse of a 10x10 identity matrix", () => {
    const matrix = getIdentity(10);
    const matrixInverse = inverse(matrix);

    expect(matrixInverse.value).toBeCloseMatrix(matrix.value, EPSILON);
  });

  it("", () => {
    const A = fromRowMajor([
      [
        0.70640616, 0.7339726, 0.36269696, 0.34364623, 0.89963481, 0.86850131,
        0.90467502, 0.84679504, 0.54817229, 0.13033882,
      ],
      [
        0.05486486, 0.07846652, 0.70578895, 0.35216711, 0.45108579, 0.63057693,
        0.28069226, 0.13632188, 0.73916536, 0.36824746,
      ],
      [
        0.13518727, 0.56746105, 0.73043147, 0.43646281, 0.32431077, 0.36597079,
        0.30425198, 0.82382021, 0.91532301, 0.32402725,
      ],
      [
        0.32837472, 0.16448795, 0.55250559, 0.86610502, 0.22159714, 0.89891942,
        0.60524733, 0.74696032, 0.01638889, 0.19332843,
      ],
      [
        0.38494904, 0.66652752, 0.53951242, 0.88482437, 0.18321965, 0.64679071,
        0.79755901, 0.75011928, 0.73083457, 0.8140642,
      ],
      [
        0.38194215, 0.16528207, 0.97190985, 0.22967736, 0.85807417, 0.12769117,
        0.39827418, 0.24501386, 0.85788431, 0.98014298,
      ],
      [
        0.41820807, 0.92749652, 0.17780964, 0.67148928, 0.74228637, 0.80855719,
        0.85585776, 0.57206011, 0.02150445, 0.10509701,
      ],
      [
        0.6350479, 0.07015936, 0.92574801, 0.83325694, 0.16731906, 0.21767483,
        0.72644383, 0.13238352, 0.01286205, 0.75224096,
      ],
      [
        0.63377093, 0.26816623, 0.90709677, 0.39087131, 0.98153103, 0.04930922,
        0.91566366, 0.45013529, 0.84427394, 0.92171579,
      ],
      [
        0.13034207, 0.87822205, 0.78485988, 0.53023558, 0.11634474, 0.5964392,
        0.04112328, 0.86115527, 0.70085139, 0.47221581,
      ],
    ]);
    const AInverse = inverse(A);
    const I = multiply(A, AInverse);
    expect(I.value).toBeCloseMatrix(getIdentity(10).value, EPSILON_F32_ANY);
  });

  it("calculates the inverse of a 10x10 matrix", () => {
    const matrix = fromRowMajor([
      [
        0.70640616, 0.7339726, 0.36269696, 0.34364623, 0.89963481, 0.86850131,
        0.90467502, 0.84679504, 0.54817229, 0.13033882,
      ],
      [
        0.05486486, 0.07846652, 0.70578895, 0.35216711, 0.45108579, 0.63057693,
        0.28069226, 0.13632188, 0.73916536, 0.36824746,
      ],
      [
        0.13518727, 0.56746105, 0.73043147, 0.43646281, 0.32431077, 0.36597079,
        0.30425198, 0.82382021, 0.91532301, 0.32402725,
      ],
      [
        0.32837472, 0.16448795, 0.55250559, 0.86610502, 0.22159714, 0.89891942,
        0.60524733, 0.74696032, 0.01638889, 0.19332843,
      ],
      [
        0.38494904, 0.66652752, 0.53951242, 0.88482437, 0.18321965, 0.64679071,
        0.79755901, 0.75011928, 0.73083457, 0.8140642,
      ],
      [
        0.38194215, 0.16528207, 0.97190985, 0.22967736, 0.85807417, 0.12769117,
        0.39827418, 0.24501386, 0.85788431, 0.98014298,
      ],
      [
        0.41820807, 0.92749652, 0.17780964, 0.67148928, 0.74228637, 0.80855719,
        0.85585776, 0.57206011, 0.02150445, 0.10509701,
      ],
      [
        0.6350479, 0.07015936, 0.92574801, 0.83325694, 0.16731906, 0.21767483,
        0.72644383, 0.13238352, 0.01286205, 0.75224096,
      ],
      [
        0.63377093, 0.26816623, 0.90709677, 0.39087131, 0.98153103, 0.04930922,
        0.91566366, 0.45013529, 0.84427394, 0.92171579,
      ],
      [
        0.13034207, 0.87822205, 0.78485988, 0.53023558, 0.11634474, 0.5964392,
        0.04112328, 0.86115527, 0.70085139, 0.47221581,
      ],
    ]);
    const expectedInverse = fromRowMajor([
      [
        3.99641023, -5.01826418, 9.45294179, -2.1654234, 1.87732232, 11.2717514,
        0.55053253, 4.49393732, -14.34681032, -8.69980916,
      ],
      [
        -0.49506158, 1.01784641, -2.04996559, -0.84668435, -0.500411,
        -2.66355933, 0.44572897, -0.24946909, 2.67877557, 2.55692676,
      ],
      [
        -1.53631195, 3.63910391, -6.22556358, 0.83306866, -2.47536438,
        -8.14387317, -1.13347387, -1.4064065, 9.4952928, 6.64681743,
      ],
      [
        1.75733329, -6.01137033, 14.00594811, -1.69456885, 2.61015718,
        14.60243126, 3.01352945, 4.55701837, -17.92426398, -12.46674684,
      ],
      [
        0.468508, -2.56461378, 5.09037597, -0.1420901, 0.33263782, 6.57025767,
        1.74329037, 0.9638409, -6.59947514, -4.81686106,
      ],
      [
        0.10354333, 2.12180697, -4.20669788, 0.6914939, -0.21347226,
        -2.95511405, -0.89869717, -1.190865, 3.30636947, 3.06534172,
      ],
      [
        -2.54440994, 5.68379034, -10.82918783, 1.39238554, -1.79184571,
        -13.82298828, -1.7305982, -3.66141537, 16.21098381, 9.48669659,
      ],
      [
        -0.52810966, -0.32574265, -1.88632602, 1.68955886, -0.43475104,
        -1.96336503, -0.84116336, -1.61565187, 3.33930806, 2.0700966,
      ],
      [
        1.57041713, -1.77368631, 6.15725075, -1.56687382, 1.58196125,
        5.59717035, 0.45493914, 1.89756225, -7.51731463, -5.42968054,
      ],
      [
        -0.99448867, 0.8770808, -4.87237671, 0.97521565, 0.38450945,
        -2.42762109, -0.76570491, -1.84024532, 4.428094, 3.48700952,
      ],
    ]);
    const result = inverse(matrix);

    // 今のところ 1e-4までなら通る
    expect(result.value).toBeCloseMatrix(expectedInverse.value, EPSILON_F32_ANY);
  });

  it("returns the identity matrix when the inverse is multiplied by the original matrix", () => {
    const matrix = fromRowMajor([
      [4, 7],
      [2, 6],
    ]);
    const identity = getIdentity(2);
    const result = multiply(matrix, inverse(matrix));

    expect(result.value).toBeCloseMatrix(identity.value, EPSILON);
  });

  it("throws an error for non-square matrices", () => {
    const nonSquareMatrix = fromRowMajor([
      [1, 2, 3],
      [4, 5, 6],
    ]);

    expect(() => inverse(nonSquareMatrix)).toThrow("Matrix must be square");
  });

  it("throws an error for singular matrices", () => {
    const singularMatrix = fromRowMajor([
      [1, 2],
      [2, 4],
    ]);

    expect(() => inverse(singularMatrix)).toThrow(`Matrix is singular`);
  });
});
