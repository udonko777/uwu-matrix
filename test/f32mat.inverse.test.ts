import { describe, expect, it } from "vitest";
import { fromRowMajor, generateIdentity, inverse, multiplyMatrix } from "../src/matrix";

describe("Matrix.inverse", () => {
  it("calculates the inverse of a 2x2 matrix", () => {
    const matrix = fromRowMajor([
      [4, 7],
      [2, 6],
    ]);
    const expectedInverse = fromRowMajor([
      [0.6, -0.7],
      [-0.2, 0.4],
    ]);
    const result = inverse(matrix);

    expect(result.value).toEqual(expectedInverse);
  });

  it("calculates the inverse of a 3x3 matrix", () => {
    const matrix = fromRowMajor([
      [3, 0, 2],
      [2, 0, -2],
      [0, 1, 1],
    ]);
    const expectedInverse = fromRowMajor([
      [0.2, 0.2, 0],
      [-0.2, 0.3, 1],
      [0.2, -0.3, 0],
    ]);
    const result = inverse(matrix);

    expect(result.value).toBeCloseMatrix(expectedInverse.value);
  });

  it("calculates the inverse of a 10x10 matrix", () => {
    const matrix = fromRowMajor([
      [0.70640616, 0.7339726, 0.36269696, 0.34364623, 0.89963481, 0.86850131, 0.90467502, 0.84679504, 0.54817229, 0.13033882],
      [0.05486486, 0.07846652, 0.70578895, 0.35216711, 0.45108579, 0.63057693, 0.28069226, 0.13632188, 0.73916536, 0.36824746],
      [0.13518727, 0.56746105, 0.73043147, 0.43646281, 0.32431077, 0.36597079, 0.30425198, 0.82382021, 0.91532301, 0.32402725],
      [0.32837472, 0.16448795, 0.55250559, 0.86610502, 0.22159714, 0.89891942, 0.60524733, 0.74696032, 0.01638889, 0.19332843],
      [0.38494904, 0.66652752, 0.53951242, 0.88482437, 0.18321965, 0.64679071, 0.79755901, 0.75011928, 0.73083457, 0.8140642],
      [0.38194215, 0.16528207, 0.97190985, 0.22967736, 0.85807417, 0.12769117, 0.39827418, 0.24501386, 0.85788431, 0.98014298],
      [0.41820807, 0.92749652, 0.17780964, 0.67148928, 0.74228637, 0.80855719, 0.85585776, 0.57206011, 0.02150445, 0.10509701],
      [0.6350479, 0.07015936, 0.92574801, 0.83325694, 0.16731906, 0.21767483, 0.72644383, 0.13238352, 0.01286205, 0.75224096],
      [0.63377093, 0.26816623, 0.90709677, 0.39087131, 0.98153103, 0.04930922, 0.91566366, 0.45013529, 0.84427394, 0.92171579],
      [0.13034207, 0.87822205, 0.78485988, 0.53023558, 0.11634474, 0.5964392, 0.04112328, 0.86115527, 0.70085139, 0.47221581],
    ]);
    const expectedInverse = fromRowMajor([
      [0.70640616, 0.7339726, 0.36269696, 0.34364623, 0.89963481, 0.86850131, 0.90467502, 0.84679504, 0.54817229, 0.13033882],
      [0.05486486, 0.07846652, 0.70578895, 0.35216711, 0.45108579, 0.63057693, 0.28069226, 0.13632188, 0.73916536, 0.36824746],
      [0.13518727, 0.56746105, 0.73043147, 0.43646281, 0.32431077, 0.36597079, 0.30425198, 0.82382021, 0.91532301, 0.32402725],
      [0.32837472, 0.16448795, 0.55250559, 0.86610502, 0.22159714, 0.89891942, 0.60524733, 0.74696032, 0.01638889, 0.19332843],
      [0.38494904, 0.66652752, 0.53951242, 0.88482437, 0.18321965, 0.64679071, 0.79755901, 0.75011928, 0.73083457, 0.8140642],
      [0.38194215, 0.16528207, 0.97190985, 0.22967736, 0.85807417, 0.12769117, 0.39827418, 0.24501386, 0.85788431, 0.98014298],
      [0.41820807, 0.92749652, 0.17780964, 0.67148928, 0.74228637, 0.80855719, 0.85585776, 0.57206011, 0.02150445, 0.10509701],
      [0.6350479, 0.07015936, 0.92574801, 0.83325694, 0.16731906, 0.21767483, 0.72644383, 0.13238352, 0.01286205, 0.75224096],
      [0.63377093, 0.26816623, 0.90709677, 0.39087131, 0.98153103, 0.04930922, 0.91566366, 0.45013529, 0.84427394, 0.92171579],
      [0.13034207, 0.87822205, 0.78485988, 0.53023558, 0.11634474, 0.5964392, 0.04112328, 0.86115527, 0.70085139, 0.47221581],
    ]);
    const result = inverse(matrix);

    expect(result.value).toBeCloseMatrix(expectedInverse.value);
  });

  it("returns the identity matrix when the inverse is multiplied by the original matrix", () => {
    const matrix = fromRowMajor([
      [4, 7],
      [2, 6],
    ]);
    const identity = generateIdentity(2);
    const result = multiplyMatrix(matrix, inverse(matrix));

    expect(result.value).toBeCloseMatrix(identity.value);
  });

  it("throws an error for non-square matrices", () => {
    const nonSquareMatrix = fromRowMajor([
      [1, 2, 3],
      [4, 5, 6],
    ]);

    expect(() => inverse(nonSquareMatrix)).toThrow("Matrix size mismatch");
  });

  it("throws an error for singular matrices", () => {
    const singularMatrix = fromRowMajor([
      [1, 2],
      [2, 4],
    ]);

    expect(() => inverse(singularMatrix)).toThrow(`Matrix is singular`);
  });
});
